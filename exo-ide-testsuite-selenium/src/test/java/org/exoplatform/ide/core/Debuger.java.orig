/*
 * Copyright (C) 2011 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.exoplatform.ide.core;

<<<<<<< HEAD
import java.util.Set;

=======
>>>>>>> c4b0c3ac613c21e9f487319c37deee78fd272698
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Debuger extends AbstractTestModule
{
   private interface Locators
   {
      String DEBUGER_VIEW_PANEL = "//div[@view-id='ideDebuggerView']";

      String DEBUGER_TAB = "//td[@class='tabTitleText' and text()='Debug']";

      String CHANGE_VAR_FIELD = "ideChangeVariableValueViewExpressionField";

      String CONFIRM_CHANGE_VAR_BTN = "ideChangeVariableValueViewChangeButton";

      String RESUME_BTN = "//div[@view-id='ideDebuggerView']//div[@class='exoToolbarPanel']/div[1]/div";

      String CHANGE_VAR_BTN = "//div[@view-id='ideDebuggerView']//div[@class='exoToolbarPanel']/div[7]/div";

      String NUMBER_STRING_JAVAEDITOR =
         "//div[@panel-id='editor' and @is-active='true']//div[contains(@style, 'float: left;')][2]//div[@style and @class and text()='%s']";

      String BREACK_POINT_LINE_CONTAINER =
         "//div[@panel-id='editor' and @is-active='true']//div[contains(@style, 'float: left;')][3]/div";

      String BREACK_POINT_IMG = BREACK_POINT_LINE_CONTAINER + "//img";

      String VARIABLES_TAB = "//td[text()='Variables']";

      String BREACK_POINTS_TAB = "//td[text()='BreakPoints']";

      String BREACK_POINTS_TAB_CONTAINER = "//div[@__gwtcellbasedwidgetimpldispatchingfocus]";

   }

   @FindBy(xpath = Locators.CHANGE_VAR_BTN)
   private WebElement changeVarBtn;

   @FindBy(xpath = Locators.DEBUGER_VIEW_PANEL)
   private WebElement view;

   @FindBy(name = Locators.CHANGE_VAR_FIELD)
   private WebElement changeField;

   @FindBy(id = Locators.CONFIRM_CHANGE_VAR_BTN)
   private WebElement confirmChange;

   @FindBy(xpath = Locators.BREACK_POINT_LINE_CONTAINER)
   private WebElement bracPointContainer;

   @FindBy(xpath = Locators.DEBUGER_TAB)
   private WebElement debugerTab;

   @FindBy(xpath = Locators.BREACK_POINT_IMG)
   private WebElement breackPoint;

   @FindBy(xpath = Locators.BREACK_POINTS_TAB)
   private WebElement breackPointTab;

   @FindBy(xpath = Locators.VARIABLES_TAB)
   private WebElement variablesTab;

   @FindBy(xpath = Locators.BREACK_POINTS_TAB_CONTAINER)
   private WebElement breakPointsContainer;

   /**
    * click on change variablr btn
    * 
    * @throws Exception
    */
   public void changeVarBtnClick() throws Exception
   {
      changeVarBtn.click();
   }

   /**
    * Wait build project view opened.
    * 
    * @throws Exception
    */
   public void waitOpened() throws Exception
   {
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return view != null && view.isDisplayed();
         }
      });
   }

   /**
    * wait appearance debugger tab
    */
   public void waitTabOfDebuger()
   {
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return debugerTab != null && debugerTab.isDisplayed();
         }
      });
   }

   /**
    * wait appearance variables tab in the IDE
    */
   public void waitVariablesTab()
   {
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return variablesTab.isDisplayed();
         }
      });
   }

   /**
    * wait appearance in breakpointTab some breakpoint with 'line' prefix
    */
   public void waitBreackPointsTabContainetNotEmpty()
   {
      waitBreackPointsTabContainer();
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return getTextFromBreackPointTabContainer().contains("[line :");
         }
      });
   }

   /**
    * wait appearance breakpointTab tab in the IDE
    */
   public void waitBreackPointsTab()
   {
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return breackPointTab.isDisplayed();
         }
      });
   }

   /**
    * wait appearance tab with breakpoints 
    */
   public void waitBreackPointsTabContainer()
   {
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return breakPointsContainer.isDisplayed();
         }
      });
   }

   /**
    * Wait while will open more 1 window. 
    * This method uses for check opening the window with debug demo project.
    * Because demo project opened In a separate window  
    * @throws Exception
    */
   public void waitOpenedSomeWin() throws Exception
   {
      new WebDriverWait(driver(), 10).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            Set<String> driverWindows = driver().getWindowHandles();
            return (driverWindows.size() > 1) ? (true) : (false);
         }
      });
   }

   /**
    * Wait change variable field
    * 
    * @throws Exception
    */
   public void waitShangeWarField() throws Exception
   {
      new WebDriverWait(driver(), 60).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            return changeField != null && changeField.isDisplayed();
         }
      });
   }

   /**
    * Wait change variable field
    * 
    * @throws Exception
    */
   public void typeToChangeVariableField(String value) throws Exception
   {
      changeField.sendKeys(value);
   }

   /**
    * Wait change variable field
    * 
    * @throws Exception
    */
   public void confirmChangeBtnClick() throws Exception
   {
      confirmChange.click();
   }

   /**
    * click on resume btn
    * 
    * @throws Exception
    */
   public void resumeBtnClick() throws Exception
   {
      driver().findElement(By.xpath(Locators.RESUME_BTN)).click();
   }

   //TODO after resolve issue IDE-2179 method should be wait breakpoint in specified position
   /**
    * Wait build project view opened.
    * 
    * @throws Exception
    */
   public void waitBreakPoint() throws Exception
   {
      new WebDriverWait(driver(), 20).until(new ExpectedCondition<Boolean>()
      {
         @Override
         public Boolean apply(WebDriver input)
         {
            try
            {

               return breackPoint.isDisplayed();
            }
            catch (Exception e)
            {
               return false;
            }
         }
      });
   }

   /**
    * click in debuger tab
    */
   public void selectDebugerTab()
   {
      debugerTab.click();
   }

   //TODO after resolve issue IDE-2179 method should be completed
   /**
    * set breackpoint in specified position
    * @param numLine
    * @throws Exception
    */
   public void setBreakPoint(final int numLine) throws Exception
   {

   }

   /**
    * get all text in breakpoint Tab control in IDE
    * @return
    */
   public String getTextFromBreackPointTabContainer()
   {
      return breakPointsContainer.getText();
   }

}
