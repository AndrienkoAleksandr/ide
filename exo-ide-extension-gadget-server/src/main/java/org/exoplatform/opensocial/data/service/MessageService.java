/*
 * Copyright (C) 2010 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.exoplatform.opensocial.data.service;

import org.exoplatform.opensocial.data.model.Message;

import java.util.List;

/**
 * @author <a href="mailto:zhulevaanna@gmail.com">Ann Zhuleva</a>
 * @version $Id: Nov 22, 2010 $
 *
 */
public interface MessageService
{
   /**
    * Retrieve Messages.
    * 
    * @param userId user ID of the person whose Messages are to be returned.
    * @param messageCollectionId ID of the message collection whose Messages are to be returned
    * @param messageId ID of the Message to be returned
    * @param appId specifies that the response should only contain Messages generated by the given appId
    * @return {@link List{@link Message}} messages
    */
   List<Message> getMessages(String userId, String messageCollectionId, String messageId, String appId);

   /**
    * Send a message
    * 
    * @param userId user ID of the person sending the Message
    * @param message message to send
    * @return {@link Message} sent message
    */
   Message sendMessage(String userId, Message message);

   /**
    * Create message collection.
    * 
    * @param userId user ID of the person to associate the message collection with
    * @param name name of the message collection to create
    * @return {@link String} message collection id
    */
   String createMessageCollection(String userId, String name);

   /**
    * Update message.
    * 
    * @param userId user ID of the person who owns the Message
    * @param message message to update
    */
   void updateMessage(String userId, Message message);

   /**
    * Update message collection.
    * 
    * @param userId user ID of the person to associate the message collection with
    * @param messageCollectionId ID of the message collection to update
    * @param name new name of the message collection to update
    */
   void updateMessageCollection(String userId, String messageCollectionId, String name);

   /**
    * Delete a message or message collection.
    * 
    * @param userId user ID of the person to associate the message collection with
    * @param messageCollectionId ID of the message collection to delete (optional)
    * @param messageId ID of the message to delete (optional)
    */
   void deleteMessage(String userId, String messageCollectionId, String messageId);
}
