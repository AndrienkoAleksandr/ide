/*
 * Copyright (C) 2010 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.exoplatform.ide.extension.gadget.server.opensocial.service;

import org.exoplatform.ide.extension.gadget.server.opensocial.model.Activity;

import java.util.List;

/**
 * Service to manipulate with OpenSocial Activity data, which represents a short summary or notification of a timestamped event.
 *
 * @author <a href="mailto:zhulevaanna@gmail.com">Ann Zhuleva</a>
 * @version $Id: Nov 19, 2010 $
 */
public interface ActivityService {
    /**
     * Request for Activities.
     *
     * @param userId
     *         user ID of the person whose activities are to be returned
     * @param groupId
     *         group ID of the group of users whose activities are to be returned
     * @param appId
     *         Specifies that the response should only contain activities generated by the given appId (optional)
     * @param activityIds
     *         list of individual activities to include in the response (optional)
     * @return
     */
    List<Activity> getActivities(String userId, String groupId, String appId, List<String> activityIds);

    /**
     * Retrieve a list of supported Activity fields.
     *
     * @return {@link List{@link String} activity fields
     */
    List<String> getActivityFields();

    /**
     * Create an Activity.
     *
     * @param userId
     *         user ID of the person to associate the activity with
     * @param activity
     *         activity to associate with the given user
     * @return {@link Activity} created activity
     */
    Activity createActivity(String userId, Activity activity);

    /**
     * Request to update an Activity.
     *
     * @param userId
     *         user ID of the person the activity is associated with
     * @param activity
     *         activity to update
     * @return {@link Activity} updated activity
     */
    Activity updateActivity(String userId, Activity activity);

    /**
     * Delete activity.
     *
     * @param userId
     *         user ID(s) of the person the activity is associated with
     * @param activity
     *         activity to delete
     */
    void deleteActivity(String userId, Activity activity);
}
