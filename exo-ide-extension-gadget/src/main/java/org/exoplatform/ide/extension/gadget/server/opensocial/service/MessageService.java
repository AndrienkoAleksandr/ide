/*
 * CODENVY CONFIDENTIAL
 * __________________
 *
 * [2012] - [2013] Codenvy, S.A.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Codenvy S.A. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Codenvy S.A.
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Codenvy S.A..
 */
package org.exoplatform.ide.extension.gadget.server.opensocial.service;

import org.exoplatform.ide.extension.gadget.server.opensocial.model.Message;

import java.util.List;

/**
 * Service is used for manipulations with OpenSocial Message data.
 *
 * @author <a href="mailto:zhulevaanna@gmail.com">Ann Zhuleva</a>
 * @version $Id: Nov 22, 2010 $
 */
public interface MessageService {
    /**
     * Retrieve Messages.
     *
     * @param userId
     *         user ID of the person whose Messages are to be returned.
     * @param messageCollectionId
     *         ID of the message collection whose Messages are to be returned
     * @param messageId
     *         ID of the Message to be returned
     * @param appId
     *         specifies that the response should only contain Messages generated by the given appId
     * @return {@link List{@link Message} messages
     */
    List<Message> getMessages(String userId, String messageCollectionId, String messageId, String appId);

    /**
     * Send a message
     *
     * @param userId
     *         user ID of the person sending the Message
     * @param message
     *         message to send
     * @return {@link Message} sent message
     */
    Message sendMessage(String userId, Message message);

    /**
     * Create message collection.
     *
     * @param userId
     *         user ID of the person to associate the message collection with
     * @param name
     *         name of the message collection to create
     * @return {@link String} message collection id
     */
    String createMessageCollection(String userId, String name);

    /**
     * Update message.
     *
     * @param userId
     *         user ID of the person who owns the Message
     * @param message
     *         message to update
     */
    void updateMessage(String userId, Message message);

    /**
     * Update message collection.
     *
     * @param userId
     *         user ID of the person to associate the message collection with
     * @param messageCollectionId
     *         ID of the message collection to update
     * @param name
     *         new name of the message collection to update
     */
    void updateMessageCollection(String userId, String messageCollectionId, String name);

    /**
     * Delete a message or message collection.
     *
     * @param userId
     *         user ID of the person to associate the message collection with
     * @param messageCollectionId
     *         ID of the message collection to delete (optional)
     * @param messageId
     *         ID of the message to delete (optional)
     */
    void deleteMessage(String userId, String messageCollectionId, String messageId);
}
