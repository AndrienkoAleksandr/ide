/*
 * CODENVY CONFIDENTIAL
 * __________________
 *
 * [2012] - [2013] Codenvy, S.A.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Codenvy S.A. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Codenvy S.A.
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Codenvy S.A..
 */
package org.exoplatform.ide.extension.gadget.server.opensocial.service;

import org.exoplatform.ide.extension.gadget.server.opensocial.model.Album;

import java.util.List;

/**
 * Service to manipulate with OpenSocial Albums data (collections of media items).
 *
 * @author <a href="mailto:zhulevaanna@gmail.com">Ann Zhuleva</a>
 * @version $Id: Nov 19, 2010 $
 */
public interface AlbumService {
    /**
     * Request to retrieve Albums.
     *
     * @param userId
     *         user ID of the person whose Albums are to be returned
     * @param groupId
     *         group ID of the group of users whose Albums are to be returned
     * @param appId
     *         specifies that the response should only contain Albums generated by the given appId (optional)
     * @param id
     *         list of Album IDs specifying the Albums to retrieve
     * @return
     */
    List<Album> getAlbums(String userId, String groupId, String appId, List<String> id);

    /**
     * Create new album.
     *
     * @param userId
     *         user ID of the person to associate the Album with
     * @param album
     *         album to create
     * @return {@link Album} created album
     */
    Album createAlbum(String userId, Album album);

    /**
     * Update an Album.
     *
     * @param userId
     *         ser ID of the person the Album is associated with
     * @param album
     *         album to update
     * @return {@link Album} album
     */
    Album updateAlbum(String userId, Album album);

    /**
     * Delete album.
     *
     * @param userId
     *         user ID of the person the Album is associated with
     * @param id
     *         ID of the Album to delete
     */
    void deleteAlbum(String userId, String id);
}
