/*
 * Copyright (C) 2010 eXo Platform SAS.
 * 
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.exoplatform.ide.extension.gadget.server.shindig;

import org.apache.shindig.auth.BlobCrypterSecurityTokenDecoder;
import org.apache.shindig.config.ContainerConfigException;
import org.apache.shindig.config.JsonContainerConfig;
import org.apache.shindig.expressions.Expressions;

import java.security.SecureRandom;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.google.inject.name.Named;

/**
 * <p>
 * The goal of the container config subclass is to integrate security key file along with exo configuration.
 * </p>
 * 
 * <p>
 * The implementation first determine the most relevant directory for performing the key lookup. It will look for a <i>gadgets</i>
 * directory under the configuration directory returned by the
 * {@link org.exoplatform.container.monitor.jvm.J2EEServerInfo#getExoConfigurationDirectory()} method. If no such valid directory
 * can be found then the implementation use the current execution directory (which should be /bin in tomcat and jboss).
 * </p>
 * 
 * <p>
 * When the lookup directory is determined, the implementation looks for a file named key.txt. If no such file is found, then it
 * will attempt to create it with a base 64 value encoded from a 32 bytes random sequence generated by {@link SecureRandom} seeded
 * by the current time. If the file exist already but is a directory then no acton is done.
 * <p>
 * 
 * @author <a href="mailto:vitaly.parfonov@gmail.com">Vitaly Parfonov</a>
 * @version $Revision$
 */

@Singleton
public class ExoContainerConfig extends JsonContainerConfig
{

   @Inject
   public ExoContainerConfig(@Named("shindig.containers.default") String s, Expressions expressions)
      throws ContainerConfigException
   {
      super(s, expressions);
      KeyCreator.createKeyFile();
   }

   @Override
   public Object getProperty(String container, String property)
   {
      if (property.equals(BlobCrypterSecurityTokenDecoder.SECURITY_TOKEN_KEY_FILE)
         && KeyCreator.getKeyFilePath() != null)
      {
         return KeyCreator.getKeyFilePath();
      }
      return super.getProperty(container, property);
   }
}
