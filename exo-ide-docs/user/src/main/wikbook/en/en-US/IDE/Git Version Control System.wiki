eXo IDE provides support for Git version control system. Git allows you to perform versioning operations with files and projects.

h1. Initializing local repository

Start using Git by initializing a Git repository as follows:

1. Create the project to initialize as Git repository.

2. Go to *Git > Initialize Repository*.

3. If the operation is successful, then the repository directory will be marked as follows:

!git folder view.png|border=0!

*Illustration. Git repository directory*

The following message will appear in the _Output Tab_

\[INFO\] Repository was successfully initialized.

To delete a repository, go to *Git > Delete Repository*. A message confirming the deletion will be displayed.

h1. Clone Repository

To clone a repository, go to *Git > Clone repository*. In the dialog window, indicate the remote repository URI and its name. The default name is *origin*, but you can choose a new one. The work directory of the cloned repository is indicated in Work directory field. Click *Clone* to proceed.

!Clone repository.png|border=0!

*Illustration. "Clone remote repository" dialog window*

h1. Add files to index

Untracked files are new files that are added to the repository but have never been added to index and committed. They are marked with a question mark: !Untracked.png|border=0!

To start tracking new files, you need to add them to the index. To do this, select the file and go to *Git >Add...* Indexed files are marked with an arrow: !Arrow sign.png|border=0!

h1. Reset Files

To remove files from the index, but not from the repository directory go to *Git > Reset files*. The dialog window asking you to choose files for removal will appear as shown below:

!Reset files.png|border=0!

*Illustration. "Select files to reset" dialog window*


Select files that you need to reset and click *Reset*.

h1. Remove

To remove files from index and repository directory at once, go to *Git > Remove...* In the dialog window choose files that you need to remove and click *Remove* respectively.

h1. Commit Files

To commit files, go to *Git > Commit...*. The committed files are marked as follows: !Commited files.png|border=0!

When committed files are changed but new changes are not committed, these files are marked with asterisk: !Commited but changed.png|border=0!

To commit new changes to Git, you need to add changed files first to index and then make new commit as described above.

h1. Reset

To revert to the particular commit, select the repository and go to *Git > Reset...* :

1. In the dialog window select the commit that you want to revert to.
2. Choose one of the three reset types that suits you and click *Reset*.

!Reset().png|border=0!

*Illustration. "Reset to commit" dialog window*

*soft* \- resets the head to the selected commit,

*mixed* \- reverts to the selected commit and resets index. No changes are applied to the working tree,

*hard* \- reverts to the selected commit, reverts index and working tree.


h1. Branches

One git repository can maintain several branches of development. To perform operations with branches go to *Git > Branches...* The following dialog window will appear:


!branches.png|border=0!

*Illustration. "Branches" dialog window*

The default branch is called *master*.

To create a new branch, click the *Create* button. In the pop up window that will appear, type a branch name and click *OK*.

To delete a branch, select it and click *Delete* button.

{info}
You cannot delete the current (checked) branch. If the current branch is checked, then *Delete* button is disabled.
{info}

To switch between branches, select the branch and click the *Checkout* button.


h1. Check Status

To watch the status of file or repository, select it and go to *Git > Status*. The status will appear in the _Output Tab_ as shown below:

!Status.png|border=0!

*Illustration. Files status in the Output window*


h1. View history

To view history of commits and changes, select the repository and go to *Git > Show History...* The following History Panel will appear:

!History shorter.png|border=0!

*Illustration. History Panel*


Use different options of comparison and view the following differences:

* Differences with previous version.
* Differences with index.
* Differences with working tree.

The differences are shown at the bottom of the History Panel in Diff format.

To view differences with previous version, select the commit and click *Show differences with previous version* button at the top right corner of History Panel. If you select the init commit, you will see the following message: nothing for comparance.

To see differences between a commit and the index, select a commit and click *Show differences with index* button.

To view differences with working tree, select a commit and click *Show differences with working tree* button.

Switch between *Show changes in project* and *Show changes of selected resources* modes to track changes respectively in particular file or in the whole repository.  For example, if you need to see the differences between the index and some files in the repository - not the whole repository - switch to *Show changes of selected resources* mode and click *Show differences with index* button as shown below:

!Index selected resourcesl.png|border=0!

*Illustration. "Show changes of selected resources" mode*

h1. Add Remote Repositories

To add remote repository, select your local repository and go to *Git > Remote > Remotes...* The following dialog window will appear:

!List of remote repositories.png|border=0!

*Illustration. "Remote repositories" dialog window*


To add a remote repository, click *Add* button. In the *Add remote repository* dialog window, choose a name and indicate location of the remote repository and click *Ok*:

!Add remote repository.png|border=0!

*Illustration. "Add remote repository" dialog window*

A remote repository will be added to the list of remote repositories.


h1. Push


To perform a push operation to a remote repository, select a repository and go to *Git > Remote > Push...* In the dialog window, choose the remote repository, the branch that you want to push and the branch of remote repository that you want to push to, and click OK as shown below:

!Push.png|border=0!

*Illustration. "Push to remote repository" dialog window*


If no remote repositories are added, then the following error message will appear:

!No repositories.png|border=0!

*Illustration. No repositories error message*


h1. Pull/Fetch

To perform pull or fetch operation, go to *Git > Remote > Pull/Fetch...* In the dialog window, choose the remote repository, a remote branch to pull/fetch from, and a local branch to pull/fetch to, as shown below and click *Pull/Fetch*:

!Pull.png|border=0!

*Illustration. "Pull from remote repository" dialog window*
