The eXo IDE application provides the original approach to operate with _REST Service_ to *validate*, *deploy/undeploy* and *launch* applications, which are compatible with the JSR-311 specification without restarting the portal, or installing additional programs. With this application, you can validate REST Service before saving, deploying, launching or undeploying the service. Feedback from server is displayed in the _Output Tab_:

!ide-groovy_script_operations.png!

*Illustration 24. REST Service operations*

All _REST Service_ commands are placed at the right part of the _Toolbar_ and in the *Run* on the top menu.

To clear the _Output Panel_, use the special button at the right top corner of the this panel.

h1. Validate REST Service

You can verify the content of _REST Service_ by using the special validation service before saving. 
To do that, simply click the *Validate REST Service* button, or go to *Run > Validate* on the top menu. In case of no errors in the service, there will be a message in the _Output Tab_:

{screen}\[INFO\]rennes.groovy validated successfully".{screen}

Otherwise, there will be a error message displayed in the _Output Tab_:

{screen}
[ERROR] rennes.groovyvalidation failed. Error (400: Bad Request)
Unexpected error. Error occurs when parse stream, compiler error:
startup failed, rennes.groovy: 4: unable to resolve class javax.ws.rs.Path1
@ line 4, column 1.rennes.groovy: 8: unable to resolve class Path , unable to find class for annotation
@ line 8, column 1.rennes.groovy: 11: unable to resolve class Path , unable to find class for annotation
@ line 11, column 3.
3 errors
{screen}

You can click on error message to go to error in REST Service file. If file is closed, than it will be opened, but sure, that you didn't delete or rename it.

h1. Deploy/Undeploy REST Service

To deploy some REST Services, do as follows:
* *Step 1:* Save the file before deploying.
* *Step 2:* Open the file in the _Content Panel_.
* *Step 3:* Click the *Deploy REST Service* button on the _Toolbar_; or go to *Run > Deploy*.
The deploy request will be sent to the server. In case of no errors, one message will be displayed in the Output tab as below: 
{screen}\[INFO\]rennes.groovy deployed successfully{screen}

Otherwise, one error message will be shown. For example,
{screen}
[ERROR] rennes.groovy deploy failed. Error (400: Bad Request)
Unexpected error. Error occurs when parse stream, compiler error:
startup failed, rennes.groovy: 4: unable to resolve class javax.ws.rs.Path1
@ line 4, column 1.rennes.groovy: 8: unable to resolve class Path , unable to
find class for annotation
@ line 8, column 1.rennes.groovy: 11: unable to resolve class Path , unable to
find class for annotation
@ line 11, column 3.
3 errors
{screen}

{warning:title=Deploy service with the already registered URI pattern}
It is impossible to deploy service with the registered URI pattern, if the path (including name) of new service is different than original one.
To cope with it, first undeploy the service with the registered URI pattern.
{warning}

{warning:title=Deploy service, which uses shared groovy scripts}
It is necessary to validate groovy scripts used by the service before deploying it by selecting: "Run > Validate" on the top menu.
{warning}

To do the *Undeploy* operation, do as follows:
* *Step 1:* Find the service which was previously deployed in the _Workspace_.
* *Step 2:* Open this service in the _Content Panel_.
* *Step 3:* Click the *Undeploy REST Service* button on the _Toolbar_, and verify if there is no error message in the _Output Tab_.

In case of no error, you will receive a message as below:
{screen}\[INFO\] /repository/collaboration/rennes.groovy undeployed successfully.{screen}

You can deploy multiple REST Services, and double-deploy the services. But, you cannot undeploy services which were not previously deployed. In this case, you will receive an error message from the server as below:

{code}
[ERROR] /repository/collaboration/rennes.groovy
undeploy failed. Error (400: Bad Request)
Can't unbind script rennes.groovy, not bound or has wrong mapping to the
resource class
{code}

{warning:title=Undeploy deleted service}
The deletion of service will not make it undeploy. Please undeploy the service before deleting it. In other case, the workaround is to create it again in the same place and then undeploy.
{warning}

h1. Use Autoload Property

The _REST Service_ will be deployed automatically on the server after being saved, if the *Autoload* service property is set as _true_. You can view this property in the _Property Tab_ which is shown by clicking the *Show Properties* button. To set or unset the "Autoload" property, use *Set REST Service autoload* or *Unset REST Service autoload* commands respectively. These commands are displayed to the current status of Autoload property, so you can invert this property. The default value of *autoload* property is set as _false_. For more details, see the illustration below:

!ide_change_autoload_property.png!

*Illustration 25. Change Autoload service property*

h1. Launch REST Service with set parameters and Preview Server Console Messages in the _Output Tab_

With the eXo IDE, you can not only write and deploy the service, but also make requests with your own _header_, _query_ and _path parameters_ and _body content_ using one of _supported methods_, _view WADL-description_ of method, _launch_ those services methods and _view service response_ in the _Output Tab_. To do that, simply call the *Launch REST Service...* command by clicking the appropriate button, or select *Run* on the top menu as follows:
* *Step 1:* Create, save and deploy _REST Service_.
* *Step 2:* Click the *Launch REST Service...* button to get the REST Service form. The eXo IDE is filling this form, based on WADL-description of _REST Service_.
* *Step 3:* Select and type the path to the service in the *Path* field. Path parameters are enclosed in curly braces.
* *Step 4:* Select one of the supported methods from the *Method* combo-box.
* *Step 5:* Select the appropriate *Request Media Type*.
* *Step 6:* Check the *Response Media Type*.
* *Step 7:* Uncheck  the redundant query parameters and set values of the rest in the table at the bottom of dialog window.
* *Step 8:* Go to the *Header Parameters* middle tab and set appropriate values.
* *Step 9:* Set request with the body content within the *Body* tab. This tab is disabled for the _GET_ request.
* *Step 10:* Press the *Send* button.

After this application has verified whether the path is correct and send the formed request to the service or display the error message, the response of service will be displayed in the _Output Tab_.

To learn about launching REST Service, see the *REST Service operations* illustration above.

|| REST Service Annotation || Element of "Launch REST Service" dialog ||
| _@Path_ | The *Path* field |
| _@GET, @POST,..._ | The *Method* field |
| _@Consumes_ | The *Request Media Type* field |
| _@Produces_ | The *Response Media Type* field |
| _@PathParam_ | The path parameters figured in curly braces, for example, /service/{*param*}/{*paramList: .\+*} |
| _@HeaderParam_ | The *Header Parameter* tab of bottom table |
| _@QueryParam_ | The *Query Parameter* tab of bottom table |
| _@DefaultValue_ | The *By default* column of bottom table |

*Table2. Reproducing service annotations in the "Launch REST Service" dialog*

h1. Get URL of REST Service

From the send request window, you can also get the URL of REST Service as follows:
* *Step 1:* Create, save and deploy REST Service.
* *Step 2:* Click the *Launch REST Service...* button to get the REST Service form.
* *Step 3"* Click the *Get URL* button to view the URL of REST Service.

h1. Review the response headers from REST Service

You can view headers, status code and status text in the _Output Panel_ after sending your requests. The message will be the following:

{screen}
[OUTPUT] - -Status - - - - - - - -
200 OK
- -Headers- - - - - - - -
Content-Type : */*
Transfer-Encoding : chunked
Server : Jetty(6.1.x)
- -Text - - - - - - - - -
Hello steve
{screen}


h2. Example: REST service with complex media types output preview

* *Step 1:* Create, save and deploy REST service with next content:
{code}
// simple groovy script
import javax.ws.rs.Path
import javax.ws.rs.POST
import javax.ws.rs.Produces
import javax.ws.rs.Consumes
import javax.ws.rs.PathParam
import javax.ws.rs.HeaderParam
import javax.ws.rs.QueryParam

@Path("/testMediaTypes")
public class TestService {
  @POST
  @Consumes("application/xml")

  @Produces("text/html")
  @Path("InnerPath/{pathParam}")
  public String post1(@PathParam("pathParam") String pathParam,
    @HeaderParam("Test-Header1") String testHeader,
    @QueryParam("Test Query Parameter 1") String testQueryParam,
    String body) {
      return "PathParam 1:" + pathParam + "; Test Query Parameter 1: " + testQueryParam 
      + "; Test-Header1: " + testHeader + "; Body: " + body;
  }

  @POST
  @Consumes("application/xml")

  @Produces("application/json")
  @Path("InnerPath/{pathParam}")
  public String post2(@PathParam("pathParam") String pathParam,
    @HeaderParam("Test-Header2") String testHeader,
    @QueryParam("Test Query Parameter 2") String testQueryParam,
    String body) {
      return "PathParam 2:" + pathParam + "; Test Query Parameter 2: " + testQueryParam 
      + "; Test-Header2: " + testHeader + "; Body: " + body;
  }

}
{code}
* *Step 2:* Select *Run > Launch REST Service...* on the top menu.
* *Step 3:* Select the *Path* field as "/testMediaTypes", method OPTIONS, then click the *Send* button.
IDE will send OPTIONS-request and display the received response in the _Output Tab_. For example:
{code}<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<application xmlns="http://research.sun.com/wadl/2006/10">
   <resources base="http://192.168.0.8:8080/rest">
      <resource path="/testMediaTypes">
         <method name="OPTIONS">
            <response>
               <representation mediaType="application/vnd.sun.wadl+xml" />
            </response>
         </method>
         <resource path="InnerPath/{pathParam}">
            <param xmlns:xs="http://www.w3.org/2001/XMLSchema" type="xs:string" style="template" 
	     name="pathParam" />
            <method name="POST" id="post1">
               <request>
                  <param xmlns:xs="http://www.w3.org/2001/XMLSchema" type="xs:string" style="header" 
		   name="Test-Header1" />
                  <param xmlns:xs="http://www.w3.org/2001/XMLSchema" type="xs:string" style="query"
                     name="Test Query Parameter 1" />
                  <representation mediaType="application/xml" />
               </request>
               <response>
                  <representation mediaType="text/html" />
               </response>
            </method>
            <method name="POST" id="post2">
               <request>
                  <param xmlns:xs="http://www.w3.org/2001/XMLSchema" type="xs:string" style="header" 
		   name="Test-Header2" />
                  <param xmlns:xs="http://www.w3.org/2001/XMLSchema" type="xs:string" style="query"
                     name="Test Query Parameter 2" />
                  <representation mediaType="application/xml" />
               </request>
               <response>
                  <representation mediaType="application/json" />
               </response>
            </method>
         </resource>
      </resource>
   </resources>
</application>
{code}
* *Step 4:* Call the *Launch REST Service* dialog and select the *Path* field.
{code}"/testMediaTypes/InnerPath/{pathParam}"{code}
* *Step 5:* Select the *Response Media Type =* "text/html" item.
* *Step 6:* Type in the *Path* filed as "/testMediaTypes/InnerPath/value1". In the _Query Parameter_ tab, set "Test Query Parameter 1"="value2". In the _Header Parameter_ tab, set "Test-Header1"="value3". In the _Body_ tab, type "example". 
* *Step 7:* Click the *Send* button.

Then eXo IDE will create request and send it. The response will be added to the _Output Tab_:

{screen}
[OUTPUT] - -Status - - - - - - - -
200 OK
- -Headers- - - - - - - -
Server : Apache-Coyote/1.1
Content-Type : text/html
Transfer-Encoding : chunked
Date : Mon, 05 Jul 2010 09:06:55 GMT
- -Text - - - - - - - - -
PathParam 1:value1; Test Query Parameter 1: value2; Test-Header1: value3; Body: example
{screen}
