h1. Create File

To create a file, for example,  do as follows:
* *Step 1:* Click the *New* button on the left of the toolbar; or go to *File > New* from the top menu to create one available type, for example REST Service, from the drop-down menu.
* *Step 2:* Save the new file in some folders of the repository by selecting the target folder in the _Workspace Panel_, then click *Save As* icon on the _Toolbar_; or go to *File > Save As...* from the top menu; or press *Ctrl + S* keys. 
* *Step 3:* Type the name of new file in the *Save file as...* window.
* *Step 4:* Click *OK* to accept creating, or *Cancel* to discard without creating the file.

!createFile.png!

*Illustration 6. Create new REST Service*

h1. Save/ Save As... File

Once you have changed content of opened file, its tab title will be marked by * and the *Save* button will be enabled. So, you can save changed content by clicking *Save* or press *Ctrl + S*, or going to *File > Save* from the top menu.
To save the file into another folder or with another name, select the target folder in the _Workspace Panel_. Next, click the *Save As...* button on the _Toolbar_; or select *File > Save As...* from the top menu.
{note}
If there is a file with the same name in the target folder, it will be rewritten by the "Save As..." command.
{note}

h1. Save All Files

If there is one or more files created, opened and changed in the _Content Panel_ before, you can save all of them simply by selecting *File > Save All* from the top menu. Take into consideration that the *Save All* command willnot have any effect on new files.

h1. Delete File

To delete a file, do as follows:
* *Step 1:* Select the target file in the _Workspace Panel_.
* *Step 2:* Click the *"Delete Item(s)..."* button on the _Toolbar_; or go to *File > Delete...* from the top menu.
* *Step 3:* Confirm the deletion in the *Delete* dialog.

Files opened in the _Content Panel_ will be closed after removing. You can view the full path to the opened file in the tip of file tab in the _Content Panel_.
{note}
The eXo IDE cannot delete items from different folders simultaneously. So, in this case, the "Delete..." command will be disabled.
{note}

h1. Rename File

To rename a file, do as follows:
* *Step 1:* Select your desired file in the _Workspace Panel_.
* *Step 2:* Go to *File > Rename...* from the top menu.
* *Step 3:* Type the new name in the rename field.
* *Step 4:* Click *Rename* to take effect, or *Cancel* to discard without renaming.

After renaming opened and unsaved file in the _Content Panel_, you can save this file later.
{note}
If there is a file with the same name in the target folder, you will receive an error message.
{note}
{warning}
Do not forget to undeploy the REST Services if they were deployed before renaming.
{warning}

h1. Open Files with the Non-default Editor

HTML and Goolge gadget files can be opened in the _Code Editor_ or in the _WYSIWYG Editor_. The _Code Editor_ is used by default.
To open such files in the _WYSIWYG Editor_ with the help of *Open File With* dialog, do as follows:
* *Step 1:* Create the target HTML file.
* *Step 2:* Select the created file in the _Workspace Panel_.
* *Step 3:* Go to *File > Open With...* on the top menu.
* *Step 4:* Select the *WYSIWYG Editor* item.
* *Step 5:* Press the *Open* button to show the created file in the _WYSIWYG Editor_.

If the target file has been opened in the _Content Panel_ before, the *Reopen confirmation* dialog will be shown:

!reopen1.png!

*Illustration 7. Open the HTML file in the WYSIWYG editor*

!WYSIWYG.png!

*Illustration 8. Opened the HTML file in the WYSIWYG editor*

To change the default editor, do as follows:
* *Step 1:* Select the *Use as default editor* checkbox in the *Open File With* dialog. 
* *Step 2:* Press the *Open* button. 
  The new settings will be stored in the _User Settings File_ at the server that will be the default editor in next sessions.
  The default editor is marked by *"\[Default\]"* in the *Open File With* dialog.

h1. Go to Folder

You can quickly find the opened file in the _Workspace Panel_ using the *Go to Folder* command as follows:
* *Step 1:* Select the appropriate file tab in the _Content Panel_.
* *Step 2:* Go to *View > Go to Folder* on the top menu.

The eXo IDE will show the folder with this file selected.
Similarly, you can localize the found file from the _Search Tab_.

h1. Download File from Server
If you want to get some files from the _JCR Repository_, do as follows:
* *Step 1:* Select the target file in the _Workspace Panel._
* *Step 2:* Go to *File > Download...* on the top menu.

  The file will be sent to the client. So, the browser will suggest you save the file on the local computer.

h1. Open Local File

With the eXo IDE, you can edit some local files with the registered type within the _Code Editor_ or _WYSIWYG Editor_. During opening, you can directly define the correct file type. To edit the local file content with the eXo IDE, do as follows:
* *Step 1:* Go to *File > Open Local File...* on the top menu.
* *Step 2:* Click the *Browse...* button in the *Open file* dialog to select the required local file.
* *Step 3:* Check the file's MIME type, based on the file extension. If needed, select another MIME type from the list.
* *Step 4:* Press the *Open* button to open the selected file content in the default editor of the _Content Panel_ with the local file name.

  Now, you can continue working with the content with the new file:

!openLocalFile.png!

*Illustration 9. Example of opening the local groovy script*

The following table is the list of MIME types registered in the eXo IDE.

|| FileType || MIME Type || Default File Extension || Default Editor ||
| *Text* | text/plain | .txt | Code Editor |
| *XML* | text/xml; application/xml | .xml | Code Editor |
| *REST Service* | application/x-jaxrs+groovy | .groovy | Code Editor |
| *Groovy Script* | application/x-groovy | .groovy | Code Editor |
| *Groovy Template* | application/x-groovy+html | .gtmpl | Code Editor |
| *HTML* | text/html | .html | Code Editor |
| *Google Gadget* | application/x-google-gadget | .xml | Code Editor |
| *JavaScript* | text/javascript; application/javascript; application/x-javascript | .js | Code Editor |
| *CSS* | text/css | .css | Code Editor |
| *<unrecognized>* | binary/octet-stream |  |  |
*Table 1. Registered MIME Types*

{note}
To load the Google Gadget file, you should set the MIME Type as "application/x-google-gadget" in the "Open file" dialog as it is figured out at the next illustration:
{note}

!mimetypes.png!

*Illustration 10. Open the Google Gadget file*

h1. Upload File

To upload the file directly into the _JCR_ on the server, go to *File > Upload...* on the top menu. For example, to upload the *gadget.xml* file into the *Gadget* folder, do as follows:
* *Step 1:* Select the *Gadget* folder item in the _Workspace Panel._ (You must create this folder before.)
* *Step 2:* Go to *File > Upload...* on the top menu.
* *Step 3:* Click the *Browse...* button in the *File to upload* dialog.
* *Step 4:* Select the *gadget.xml* file from the local computer.
* *Step 5:* Select the appropriate MIME type as _application/x-google-gadget_.
* *Step 6:* Press the *Upload* button.
  The *gadget.xml* gadget will be uploaded on the sever and appear in the *Gadget* folder on the_Workspace Panel_.

h1. Use File Template

_File Template_ is stored in the IDE registry file, and then can be used to create another file with the same MIME type.

h2. Save File as Template

To save file's content as the template for new file with the same MIME type, do as follows:
* *Step 1:* Go to *File > Save As Template...*.
* *Step 2:* Set the template name.
* *Step 3:* Give the description for the template.
* *Step 4:* Click *Save* to accept, or *Cancel* to discard without saving the file as template.
  Also, you can save the uploaded file as template.

!saveAsTemplate.png!

*Illustration 11. Save file as template*

h2. Create File from Template

If you want to use some of predefined file template, you can use the *Create file* function. For example, to create simple gadget XML file, do as follows:

* *Step 1:* Click the *New* button on the _Toolbar_ and select *File From Template...* from the pop-up window to open the dialog (or press *Ctrl + N* hotkeys).
* *Step 2:* Select the needed file type and template.
* *Step 3:* Verify the file name and click *Create* to accept.

!createFromTemplate.png!

*Illustration 12. Create the gadget from template*

h2. Remove Non-default File Template

To remove the non-default file template, do as follows:
* *Step 1:* Click the *New* button on the _Toolbar_.
* *Step 2:* Select *File From template...*; or press *Ctrl + N* hotkeys.
* *Step 3:* Select the needed template and click *Delete*. 
  The dialog will appear to ask you to confirm the action. 
  
{warning:title=Delete file template, that is used in project template}
If file template is used in project template, confirmation deleting dialog will be shown. After deleting file template, project management will create project without this file.
{warning}

h1. Use Project Template

h2.Create Project Template

To create project template, go to *File > New > Project template...* on top menu or click *New* button on the _Toolbar_ and select *Project Template...*:

!ide_create_project_template.png! 

*Illustration 12.1. Create project template*

After *"Create project template"* dialog window appears, you can set project template name and description, edit project template structure (using buttons to the right of the tree). 

To add folder into project template, do as follows:
* *Step 1:* Select folder in tree, in which new folder will be created. 
* *Step 2:* Click the *Add Folder* button. 
* *Step 3:* Type name of new folder in the *Add folder* dialog window and click *Ok*. 
   New folder will be created in the project template.

To add new file to project, do as follows:
* *Step 1:* Select target folder in tree
* *Step 2:* Click the *"Add file"* button. *Add file template* dialog window appears. This window is looks like *"Create file"* from template window, except of *"Create"* button. 
* *Step 3:* Select file template
* *Step 4:* Type file name in the text field and click the *Add* button.

To delete some element from project template tree, do as follows:
* *Step 1:* Select item (folder or file).
* *Step 2:* Click the *Delete* button.

h2. Create Project from Template

!create_project_from_template.png!

*Illustration 13. Create project from template*

To create Project from Template, follow these steps

* *Step 1:* Select folder in navigation tree (parent for new project)
* *Step 2:* Click on the "New" button on the left of the Toolbar or select "File->New" from top menu and then choose "Project From Template".
* *Step 3:* Select project template from list
* *Step 4:* Set name to project in appropriate field
* *Step 5:* Click "Create" button

h3. Create project from Sample Project Template

There is default project template, which marked by red color in project template list.

!ide-create-sample-project.png!

*Illustration 14. Create project from Sample project template*

You can create project from default template, as written above.

New sample project will contain two folders: client, server and two files: Greeting Google Gadget.xml (Google Gadget) in client folder and Greeting REST Service.groovy (REST Service) in server folder.

To run this sample, do as follows:
* *Step 1:* Open and deploy Greeting REST Service.groovy
* *Step 2:* Open Greeting Google Gadget.xml and click *Show Preview* button
* *Step 3:* Preview of gadget will appear in Preview tab: form with input field and *Ok* button
* *Step 4:* Enter name to input field and click *Ok* button

!ide-run-sample-project.png!

*Illustration 15. Run sample project*

Google Gadget will send request to Greeting REST Service. When response will be received, gadget will display it under input field.

h2. Remove Project Template

To delete Project Template, follow these steps

* *Step 1:* Click on the "New" button on the left of the Toolbar or select "File->New" from top menu and then choose "Project From Template".
* *Step 2:* Select project template from list
* *Step 3:* Click "Delete" button

h1. Open/Select/Close/Browse tabs

To switch to the necessary file, click the tab title with the appropriate name. 
To close the file, just click the *X* button on the tab title. 
Also, you can use the tab browsing buttons "<", ">" and down arrow at the top right corner of the _Content Panel_ as below:

!ide-code-editor-browsing-buttons.png!

{note}
You can view the full path to the opened file in tip of tab title.
{note}

There are several useful commands represented with special buttons at the center of _Toolbar_ and in the *Edit* on the top menu: *Undo/Redo Typing*, *Format*, *Show/Hide Line Numbers*:

!edit.png!

*Illustration 16. Undo/Redo, Format and Show/Hide Line Numbers on _Toolbar_ and in top menu*

h1. Undo/Redo Editing

Actions to edit text are added into the history as distinct batch according to the editing pauses. After each pause of editing, the new operations batch is created. So, you can redo or undo current file content changes using *Undo Typing* or *Redo Typing* on the _Toolbar_ (see the illustration above). Also, you can press *Ctrl + Z* or *Ctrl+Y* hotkeys respectively.
In the _Code Editor_, the *Undo/Redo* functions are disabled if no changes in the *Undo/Redo* history.
Each file opened in the editor has its own history.

h1. Edit Files in the Code Editor

When a file is created or opened, its content will be displayed in the separate tab on the _Content Panel_ (see the illustration.1 for details) in the default _Code Editor_. This is eXo GWT implementation of Codemirror application from [http://marijn.haverbeke.nl/codemirror/|http://marijn.haverbeke.nl/codemirror/]. The JavaScript library is used to create an editor interface for _Groovy_, _JavaScript_, _XML_, _Google Gadget_, _CSS_, _text_ and _HTML_ MIME types of content. Such codes will be colored, and the editor will help you with indentation.

h2. Format File

In the _Code Editor_, *Format* is to adjust row indentations of the HTML, Groovy, JavaScript, XML content with two spaces by default. To do this, select *Format* from the _Toolbar_; or go to *Edit > Format* on the top menu.

h2. Show/hide line numbers

In the left gray field, the _Code Editor_ displays line numbers (see the illustration above). 
To hide this field in all opened file tabs, go to *Edit > Hide Line Numbers* on the top menu. Also, this action turns off the line numbers field in the opening file tabs later, and the settings will be saved in the browser cookies.
To view line numbers again in all opened Code Editors, go to *Edit > Show Line Numbers* on the top menu.

h2. Go to lines

You can quickly move to the specific line in the editor using the *Go to line* dialog window.

!goToLine.png!

*Illustration 17. Go to lines*

To go to a line, simply click *View > Go to Line...* from the top menu, or double-click the label that shows the current cursor position in the _Status Bar_.

When the *Go to line* dialog window appears, you can enter the line number into the input field and click *Go* button. The label above the text field shows the range of lines in the active file. Only numeric values are accepted, so if you print the number out of range, an error will be shown.
{tip}
You can also call the "Go to line" dialog window by pressing "Ctrl + L" hotkeys (use the hot key manager to customize your hotkeys).
{tip}

h2. Watch the cursor position in the _Status Bar_

When the editor is opened, the current cursor position is shown in the _Status Bar_. The first number is the line number and the second is the column position. If you make one click on this label, the *Go to line* dialog window will be shown.

h2. Delete lines

You can quickly delete the current line in the editor as follows:
* *Step 1:* Hover the cursor onto the line you want to delete.
* *Step 2:* Go to *Edit > Delete Current Line* on the top menu; or use *Ctrl + D* hotkeys (use the hot key manager to customize your hotkeys).

h2. Find/Replace

This function is commonly used in text files as follows:
* *Step 1:* Find and select phrase in the text from cursor position using the *Find* button.
* *Step 2:* Replace the found phrase with the new phrase using the *Replace* button.
* *Step 3:* Replace the found text with replacement and then try to find and select next occurrence (button *Replace/Find*).
* *Step 4:* Replace all phrases in the text with replacement from the cursor position (button *Replace All*).

!findText.png!

*Illustration 18. Find and replace operations with file's content*

To open the dialog window for finding and replacing the text, do as follows:
* *Step 1:* Open at least one file.
* *Step 2:* Find *Find/Replace...* button on the _Toolbar_; or go to *Edit | Find/Replace...* on the top menu.
* *Step 3:* Type the phrase you want to find in the selected file into the *Find* field. The text for replacing may be entered in the *Replace with* field.
* *Step 4:* Click *Find*.

If the text is found, "Replace" and "Replace/Find" buttons will become active. Now, you can replace found phrases with the phrases entered in the *Replace with* field clicking the *Replace* or *Replace/Find* buttons.

If you want to replace one text with another from the cursor to the end of file, simply click the *Replace All* button.

To do the case sensitive search in your selected file, check the *Case sensitive* field .

If you do *find/replace* actions with one file and then switch to another, the dialog window will save the status of performed actions of each editor's opened file.

h2. Code Autocomplete

This feature enables you to autocomplete word including keywords, statements, declared variables and functions in context of JavaScript, CSS, HTML, XML, Google Gadget and Groovy Template files simply by clicking *Ctrl + Space* hotkeys. This gadget displays the *Autocomplete* form at the start of word:

!code-autocomplete.png!

*Illustration 19. Autocomplete form*

In the Google Gadget, the HTML and Groovy Template files autocomplete the list of content, depending on the cursor position within the file. If the cursor is put between <script> tags, or between <style> tags, there will be the autocomplete list for JavaScript content, or for CSS content respectively. In the other places, there will be the autocomplete list for HTML content.

To use the *Autocomplete* function, do as follows:
* *Step 1:* Open the target file with supported file types (JavaScript, CSS, HTML, Google Gadget, Groovy Template) with your desired editor.
* *Step 2:* Set the cursor at the needed position in the document.
* *Step 3:* Press *Ctrl + Space* to get the *Autocomplete* form.
* *Step 4:* Select the token in the list of this form; or type first letters of token to reduce the token list, then select the appropriate token.
* *Step 5:* Press the *Enter* key to paste the selected token into the document, or the *Esc* key to discard the *Autocomplete* form.

Also, you may double-click the needed token in the list to paste this token into the document.
To close the *Autocomplete* form, you may also click the outside of form.

!autocomplete2.png!

*Illustration 20. Autocomplete form with description*

h3. JavaScript specific autocomplete items

There are some special template tokens in the autocomplete list to insert the code template. For example, the *if-condition* template is:

{code:lang=javascript}if (condition)
{

}{code}

Tokens of different types are marked by different colors:
* Green token is a function which will be inserted name of function.
* Red token is variable which will be inserted name of variable.
* Grey token is keyword of JavaScript.
* Templates have special icon (see *Illustration 19. Autocomplete form* above)

h3. CSS specific autocomplete items

!ide-autocomplete-css.png!

*Illustration 21. CSS autocomplete*

In the CSS file, the autocomplete list contains all the properties of Cascading Style Sheets. They are marked with yellow token picture.

h3. HTML specific autocomplete items

There are two HTML autocomplete lists: one of all HTML tags, the other of all properties of the pointed tag.

!ide-autocomplete-html.png! !ide-autocomplete-html-tag.png!

*Illustration 22. HTML autocomplete form*

Also, you can call CSS properties and JavaScript autocomplete list if your current cursor position is inside <style> or <script> tags respectively.

h3. Groovy Template specific autocomplete items

At present, there is no autocompletion for the Groovy code in the Groovy Template file. Content of Groovy tags (<%%>) is ignored. For other content, the autocompletion is the same as for HTML file.

h3. XML autocompletion specific

For XML autocompletion, only the previously typed tag is used. There is no schema or name space analyses.

h2. Code Outline

The code outline can be used to create codes productively. The outline is available for Google Gadget, JavaScript, XML, HTML and Groovy Template files.

!outline.png!

*Illustration 23. Code outline*

When you create a file with the type from the above list, the _Outline Panel_ will appear on right. When you open a file of other types (or select other tabs), this panel will be hidden. You can close the _Outline Panel_ by clicking the *Close* button on the tab header. Also, you can show/hide the _Outline Panel_ by pressing *Show/Hide Outline* button on the _Toolbar_ or going to *View > Show Outline* on the top menu.

In the _Outline Panel_, you can see the tree of global variables, functions and local variables, functions, methods and properties (the latter two are available for JSON-objects) and HTML or XML tags (for HTML, XML, Google Gadget files).

The outline tree refreshes automatically after two seconds when you stop typing code. You can click the item in the outline tree, then the cursor will set on the line, where this item is defined. When you move the cursor onto the page, the current token will be selected in the outline tree.

h1. Edit File in the WYSIWYG Editor

Besides the _Code Editor_, you can open and edit HTML files and _Google Gadgets_ with the _WYSIWYG Editor_ based on the CKEditor. You can set the _WYSIWYG Editor_ for those files as default.
_WYSIWYG Editor_ is the eXo GWT implementation of CKEditor application from [http://ckeditor.com/|http://ckeditor.com/] \- the widely used WYSIWYG-editor of HTML-content. Also, it is used to edit Google Gadget or Groove Template files.

_WYSIWYG Editor_ does not support the line numbering, auto-indentation and format, code coloring, autocomplete, or code outline. However, the text edited with the _WYSIWYG Editor_ looks as similar as possible to the results published. This editor has many common editing features found on desktop editing applications like Microsoft Word and OpenOffice.
To open a file with the _WYSIWYG Editor_, see *Open file with the non-default editor* above.

[This User Guide|http://docs.cksource.com/FCKeditor_2.x/Users_Guide ] is a good start point to get advanced information about this editor.

h1. Preview File Properties

Connected with the JCR repository node, file properties are displayed in the _Properties Tab_ in the bottom of _Content Panel_. To view file properties, do as follows:
* *Step 1:* Open the file in the _Content Panel_.
* *Step 2:* Click the *Show Properties* button at the right part of the _Toolbar_; or go to *View > Properties* on the top menu.

!ide_change_file_property.png!

*Illustration 24. View file's properties*

{note}
It is impossible to view the properties of just created and non-saved files.
{note}
