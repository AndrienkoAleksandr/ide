h1. Create File

To create a file, do as follows:
* *Step 1:* To create a new file click the *New* button on the left of the toolbar. Select the required file type in drop down menu.
* *Step 2:* Save the new file in some folders of the repository by selecting the target folder in the _Workspace Panel_, then click the *Save As* icon on the toolbar; or go to *File > Save As...* from the top menu; or press *Ctrl+S* keys.
* *Step 3:* Type the name of new file in the *Save file as...* window.
* *Step 4:* Click *OK* to accept creating the new file.

!createFile.png!

*Illustration. Create new REST Service*


h1. Save/Save As... File

Once you have changed content of the opened file, its tab title will be marked by * and the *Save* button will be enabled. So, you can save changed content by clicking *Save* or press *Ctrl+S*, or going to *File > Save* from the top menu.
To save the file into another folder or with another name, select the target folder in the _Workspace Panel_. Next, click the *Save As...* button on the toolbar; or select *File > Save As...* from the top menu.

{note}
If there is any file with the same name in the target folder, it will be rewritten by the "Save As..." command.
{note}



h1. Save All Files

If there is one or more files created, opened and changed in the _Content Panel_ before, you can save all of them simply by selecting *File > Save All* from the top menu. The *Save All* command does not have any effect on new files.


h1. Delete File

To delete a file, do as follows:
* *Step 1:* Select the target file in the _Workspace Panel_.
* *Step 2:* Click the *Delete Item(s)...* button on the toolbar; or go to *File > Delete...* from the top menu.
* *Step 3:* Confirm the deletion in the *Delete* dialog.

Files opened in the _Content Panel_ are closed after being removed. You can view the full path to the opened file in the tip of file tab in the _Content Panel_.

{note}
In eXo IDE, you cannot delete items from different folders simultaneously. The "Delete..." function is disabled in such cases.
{note}



h1. Rename File

To rename a file, do as follows:
* *Step 1:* Select your desired file in the _Workspace Panel_.
* *Step 2:* Go to *File > Rename...* from the top menu.
* *Step 3:* Enter the new name into the *Rename item to* field.
* *Step 4:* Click *Rename* to take effect.

{note}
If your new file name has been existing in the target folder, you will receive an error message.
{note}
{warning}
Do not forget to undeploy the REST Services if they were deployed before renaming.
{warning}



h1. Change MIME Type of File

You can change the MIME type of the closed file as follows:
* *Step 1:* Click the target file in the _Workspace Panel_.
* *Step 2:* Go to *File > Rename...* from the top menu.
* *Step 3:* Select the new MIME type from *Select mime-type* combo-box, or type another non-registered MIME type in this field.
* *Step 4:* Click *Rename* to change the MIME type.

{note}
You cannot open the file with the non-registered MIME type in eXo IDE.
{note}



h1. Lock File

This feature is used to protect your files from being changed or removed by another users. You can lock or unlock the file by clicking the *Lock* or *Unlock* icon on the toolbar, or going to *Edit > Lock/Unlock File* on the top menu.

The "Lock" icon is located next to the title of the locked file in the _Workspace Panel_ and at the title of such file tab in the _Content Panel_:


!file_loked.png!

*Illustration. Locked file in Workspace Panel*


!file_read_only.png!

*Illustration. Locked file in Content Panel*


Another users can open the locked files to read only, but can not edit, save, delete, move or rename.

{warning}
If you open the locked file with the WYSIWYG Editor, you can edit its content, but the "Save" function is disabled.
{warning}



h1. Open Files with the Non-default Editor

HTML and Google gadget files can be opened in either the default _Code Editor_ or _WYSIWYG Editor_. To open a file in the _WYSIWYG Editor_, do as follows:

* *Step 1:* Click the needed HTML or Google Gadget file in the _Workspace Panel_.
* *Step 2:* Go to *File > Open With...* on the top menu.
* *Step 3:* Select *WYSIWYG Editor* and then click *Open* to show the selected file in the _WYSIWYG Editor_.

If the target file has been opened in the _Content Panel_ before, the confirmation dialog is shown for you to affirm reopening it:

!reopen1.png!

*Illustration. Open the HTML file in the WYSIWYG editor*

!WYSIWYG.png!

*Illustration. Opened the HTML file in the WYSIWYG editor*

If you want to change the default editor, simply click your desired editor and mark the *Use as default editor* checkbox in the *Open File With* dialog.

The new settings are stored in the _User Settings File_ at the server that will be the default editor in next sessions.
The default editor is marked by the "Default" text in the *Open File With* window.


h1. Go to Folder

You can quickly find the opened file in the _Workspace Panel_ using the *Go to Folder* function as follows:
* *Step 1:* Select the appropriate file tab in the _Content Panel_.
* *Step 2:* Go to *View > Go to Folder* on the top menu.

Your selected file will be highlighted in the _Workspace Panel_. Similarly, you can localize the found file from the _Search Tab_.


h1. Download File from Server

If you want to get some files from the _IDE Workspace_, do as follows:
* *Step 1:* Select the target file in the _Workspace Panel._
* *Step 2:* Go to *File > Download...* on the top menu.

The file will be sent to the client and the suggestion window will be shown for you to save the file into your local device.


h1. Open Local File

In eXo IDE, you can edit some local files with the registered type within the _Code Editor_ or _WYSIWYG Editor_. During opening, you can directly define the correct file type. To edit the local file content in eXo IDE, do as follows:
* *Step 1:* Go to *File > Open Local File...* on the top menu.
* *Step 2:* Click the *Browse...* button in the *Open file* dialog to select the required local file.
* *Step 3:* Check the file's MIME type, based on the file extension. If needed, select another MIME type from the list.
* *Step 4:* Press the *Open* button to open the selected file content in the default editor of the _Content Panel_ with the local file name.


!openLocalFile.png!

*Illustration. Example of opening the local REST service*

The following table is the list of MIME types registered in the eXo IDE.

*Table. Registered MIME Types*
|| File Type || MIME Type || Default File Extension || Default Editor ||
| *Text* | text/plain | .txt | Code Editor |
| *XML* | text/xml; application/xml | .xml | Code Editor |
| *REST Service* | application/x-jaxrs+groovy | .grs | Code Editor |
| *POGO* | application/x-groovy | .groovy | Code Editor |
| *Template* | application/x-groovy+html | .gtmpl | Code Editor |
| *HTML* | text/html | .html | Code Editor |
| *Google Gadget* | application/x-google-gadget | .xml | Code Editor |
| *JavaScript* | text/javascript; application/javascript; application/x-javascript | .js | Code Editor |
| *CSS* | text/css | .css | Code Editor |
| *Netvibes Widget* | application/x-uwa-widget | .html | Code Editor |
| *Data Object* | application/x-chromattic+groovy | .groovy | Code Editor |
| *<unrecognized>* | binary/octet-stream | | |

{note}
To load the Google Gadget file, you should set the MIME Type as "application/x-google-gadget" in the "Open file" dialog as figured out in the below illustration:
{note}


!mimetypes.png!

*Illustration. Open the Google Gadget file*


h1. Upload File

To upload a file directly to the _IDE Workspace_, on the server, go to *File > Upload File...* on the top menu. For example, to upload the *gadget.xml* file to the *Gadget* folder, do as follows:
* *Step 1:* Select the *Gadget* folder in the _Workspace Panel._
* *Step 2:* Go to *File > Upload File...* on the top menu.
* *Step 3:* Click the *Browse...* button to select the *gadget.xml* file from the local device in the *File upload* dialog.
* *Step 4:* Select the appropriate MIME type as _application/x-google-gadget_.
* *Step 5:* Press the *Upload* button.
The *gadget.xml* gadget is uploaded to the server and placed in the *Gadget* folder.


h1. Upload Zipped Folder

To upload a zipped folder to the _Workspace_ on the server, the folder must be packaged as the .zip archive.

* *Step 1:* Select the parent folder item in the _Workspace Panel._
* *Step 2:* Go to *File > Upload Zipped Folder...* on the top menu.
* *Step 3:* Click the *Browse...* button to select the zipped folder from the local device in the *Upload folder* dialog.
* *Step 4:* Press the *Upload* button.

The zipped folder is uploaded to the sever and unzipped in the folder selected in step 1.


h1. Open File by Path

To open a file by its path, for example *Example.groovy*, do as follows:

* *Step 1:* Go to *File > Open File By Path...* on the top menu.
* *Step 2:* Enter the path of the target file "http://127.0.0.1:8080/rest/private/ide-vfs-webdav/repository/production/Example.groovy" into the *File URL* field of the *Open file by path* dialog.
* *Step 3:* Click the *Open* button to show the *Example.groovy* file in the new file tab of the _Content Panel_.

You can select *View > Get URL...* on the top menu to obtain the file path.

{note}
The target file should be placed at the same domain as IDE.
{note}



h1. Use File Template

_File Template_ is stored in the IDE registry file, and then can be used to create another files with the same MIME type.


h2. Save File as Template

To save the selected file as a template with the same MIME type, do as follows:
* *Step 1:* Go to *File > Save As Template...* on the top menu.
* *Step 2:* Enter the template name.
* *Step 3:* Define the brief description of the template.
* *Step 4:* Click *Save* to accept.
You can also save the uploaded file as template.

!saveAsTemplate.png!

*Illustration. Save file as template*


h2. Create File from Template

The *File From Template...* function enables you to create a file from the predefined template. For example, to create a simple gadget XML file, do as follows:

* *Step 1:* Click the *New* button on the toolbar and select *File From Template...* from the pop-up to open the dialog, or press *Ctrl+N* hotkeys.
* *Step 2:* Select your desired type and template for the file.
* *Step 3:* Enter the name into the *File Name* field, and click *Create* to complete adding your new file. The newly created file is opened automatically in the _Content Panel_.

!createFromTemplate.png!

*Illustration. Create the gadget from template*


h2. Remove Non-default File Template

To remove a non-default file template, do as follows:

* *Step 1:* Click the *New* button on the toolbar.
* *Step 2:* Select *File From Template...*; or press *Ctrl+N* hotkeys.
* *Step 3:* Select the needed non-default template in black and click *Delete*.
The confirmation dialog will appear for you to verify your deletion.

{warning}
After deleting the file template which has been used in the project template, a new project will be created from such project template without this file.
{warning}



h1. Use Project Template

_Project Template_ helps you create folders and files with the predefined structure and content. You can create, update or remove your project template and add new folders and files from your template.


h2. Create Project Template

To create a project template, do as follows:
* *Step 1:* Go to *File > New > Project Template...* on the top menu; or click the *New* button on the toolbar and select the *Project Template...* command:
!ide_create_project_template.png!

*Illustration. "Create project template" dialog window.*


* *Step 2:* Enter the name and brief description in the *Create project template* form
* *Step 3:* Edit its structure by clicking buttons *Add Folder*, *Add File*, *Delete* at the right part of the *Create project template* dialog.
* *Step 4:* Click *Create* button to complete your project template.


h2. Remove Project Template

To remove a project template, do as follows:
* *Step 1:* Click *New > Project From Template...* on the toolbar; or go to *File > New > Project From Template...* from the top menu.
* *Step 2:* Select your desired target project template from the list.
* *Step 3:* Click the *Delete* button.


h1. Open/Select/Close/Browse tabs

To switch to the necessary file, click the tab title with the appropriate name. To close the file, just click the *X* button on the tab title.
You can also use the tab browsing buttons *<*, *>* at the top right corner of the _Content Panel_ as shown below:

!ide-code-editor-browsing-buttons.png!

*Illustration. File tab browsing buttons.*

{note}
You can view the full path to the opened file in the tip of the tab title.
{note}


You can see some useful commands represented with special buttons on the toolbar and in the *Edit* on the top menu: *Undo/Redo Typing*, *Format*, *Show/Hide Line Numbers*:

!edit.png!

*Illustration. Undo/Redo, Format and Show/Hide Line Numbers on the toolbar and on the top menu*.


h1. Undo/Redo Editing

Your actions performed with the text are added to the history as distinct batches after each pause, saving you from fear of doing something wrong. So, you can restore your file content by using the Undo or Redo functions. The use of these actions is the same as in all text editors:
* To perform *Undo* function click *Undo typing* button on the toolbar or press *Ctrl+Z*.
* To perform *Redo* click *Redo typing* button or press *Ctrl+Y* respectively.


h1. Edit Files in the Code Editor

Once a file has been created/opened, its content is displayed in the separate tab on the _Content Panel_ in the default _Code Editor_. eXo IDE Code Editor parses and colors the code, you can indent code, search text, locate open/close braces and brackets, see line numbers and more...


h2. Format File

In the _Code Editor_, the *Format* command used is to adjust row indentations of the HTML, Groovy, JavaScript, XML content with two spaces by default. To do this, select *Format* from the toolbar, or go to *Edit > Format* on the top menu.


h2. Show/Hide Line Numbers

To show line numbers in the _Code Editor_, go to *Edit > Show Line Numbers* from the top menu. The *Show Line Numbers* is turned into *Hide Line Numbers*. You will see the left vertical grey area in all opened files.

Select "Hide Line Numbers" to hide line numbers. The last selected settings are saved in the browser cookies for next sessions.


h2. Go to Line

To go to the exact line quickly, do as follows:

* *Step 1:* Open the *Go to Line* dialog by following one of the listed below ways:

(1) select *Edit > Go to Line...* from the top menu,

or (2) double-click the area showing the current cursor position in the _Status Bar_,

or (3) press *Ctrl+L*.

!goToLine.png!

*Illustration. Go to line*


* *Step 2:* In Line number, type a number within the allowable range and click *Go*. If you enter the number out of range, there will be an error message.



{note}
If "Ctrl+L" does not work, use the hot key manager to customize your hotkeys.
{note}



h2. Watch the cursor position in the _Status Bar_

When the editor is opened, the current cursor position is shown in the _Status Bar_. The first number is the line number and the second is the column position.


h2. Delete line

You can quickly delete the current line in the editor as follows:
* *Step 1:* Put the cursor on the needed line.
* *Step 2:* Use *Edit > Delete Current Line* command from the top menu, or press *Ctrl+D* to remove the highlighted line from the file.


h2. Find/Replace

This function is commonly used in text files to quickly search for a specific word/phrase and to replace the text as follows:

* *Step 1:* Open your desired file.
* *Step 2:* Open the *Find/Replace* window by following one of the ways described below:

(1) select the *Find/Replace...* icon on the toolbar,

or (2) go to *Edit > Find/Replace...* from the top menu,

or (3) press *Ctrl+F*.

* *Step 3:* Enter the word/phrase for which you want to search into the *Find* field.
* *Step 4:* Click the *Find* button to do the search.

Once the text has been found, and if you want to replace the found phrase, continue doing the next steps:

* *Step 5:* Enter the replacement text into the *Replace with* field.
* *Step 6:* Click the *Replace* or *Replace/Find* button to replace the found word/phrase, or select *Replace All* to replace all.


!findText.png!

*Illustration. Find and replace operations with file's content*

{note}
* All functions in the "Find/Replace" window are only performed as from the current position of the cursor to the end of the file.
* "Replace" and "Replace/Find" are only active if the text is found.
* Check the "Case sensitive" field to do the search based on differing the use of uppercase and lowercase letters.
* If you do the "Find/Replace" action with one file and then switch to another, this window will save the status of performed actions of the opened file in each editor.
{note}



h2. Code Autocomplete

This feature enables you to autocomplete the word, including keywords, statements, declared variables, properties and methods, functions, objects, classes, tags, attributes, annotations in context of JavaScript, HTML, XML, Google Gadget, REST Service, Template, POGO, Netvibes Widget, Data Object files simply by clicking *Ctrl+Space* hotkeys. The *Autocomplete* form looks as follows:

!code-autocomplete.png!

*Illustration. Autocomplete form*

In the files of Google Gadget, HTML and Template types, the autocomplete list displays various content for each case, depending on the cursor position within the file. If the cursor is put between <script> tags, or between <style> tags, there will be the autocomplete list for JavaScript content, or for CSS content respectively. In the other places, the autocomplete list for the HTML content is displayed.

To use the *Autocomplete* function, do as follows:
* *Step 1:* Open the target file with supported file types (JavaScript, CSS, HTML, Google Gadget, ECM Template and others) with the _Code Editor_.
* *Step 2:* Put the cursor on the needed position in the document.
* *Step 3:* Press *Ctrl+Space* to get the *Autocomplete* form.
* *Step 4:* Select the token in the list of this form; or type first letters of the token to reduce the token list and then select the appropriate token.
* *Step 5:* Press the *Enter* key or double-click the selected token to complete the word next to the cursor.

{info}
* Use "Alt+Space" hotkeys instead of "Ctrl+Space" in the Mac OS.

* Click the outside area of the form to quit the "Autocomplete" form.

* Press the "Esc" key to discard the "Autocomplete" form.
{info}



!autocomplete2.png!

*Illustration. Autocomplete form with description*


h3. JavaScript Specific Autocomplete List

There are some special template tokens in the autocomplete list to insert the code template. For example, the *if-condition* template is shown as below:

{code:lang=javascript}if (condition)
{

}{code}


Template tokens have the special icon as shown in *Illustration. Autocomplete form* and tokens of different types are marked with different colors, including:

|| Token || Marked color ||
| Function name | Green |
| Variable name | Red |
| Javascript key | Grey |



h3. CSS Specific Autocomplete List

!ide-autocomplete-css.png!

*Illustration. CSS autocomplete*

In the CSS file, the autocomplete list contains all the properties of Cascading Style Sheets. They are marked with the yellow token icons.


h3. HTML Specific Autocomplete List

There are two HTML autocomplete lists: one of all HTML tags, and the other of all properties of the pointed tag.


!ide-autocomplete-html.png! !ide-autocomplete-html-tag.png!

*Illustration. HTML autocomplete form*

Also, you can call the CSS properties and JavaScript autocomplete list if your current cursor position is inside <style> or <script> tags respectively.


h3. XML Specific Autocomplete List

For the XML files, there is only one autocomplete list for the previously typed tag. There is no schema or namespace analysis.


h3. ECM Template Autocomplete List

Currently, the autocomplete list of the ECM Template files is the same as that of the HTML files. Moreover, the content between Groovy tags <% %> is ignored.

.


h3. Netvibes Widget Autocomplete List

The autocomplete list of the Netvibes Widget files is the same as that of the HTML files.

The     autocomplete list inside javascript tags is the     composition of the JavaScript autocomplete     list and Netvibes     snippets:
* JSON request snippet
* Flash object snippet
* Pager Control snippet
* Tabview Control snippet
* Thumbnailed List snippet

Exo IDE supports autocomolete for Netvibes Universal Widget.

!uwa-autocomplete.png|border=1!

*Illustration. Netvibes autocomplete form for UWA classes*

It is possible to autocomplete the created Netvibes object's properties and methods.

!uwa-autocomplete2.png|border=1!

*Illustration. Netvibes autocomplete form for object's properties and methods*


More details about this snippets (and code, that will be inserted) you can see in hint window of autocomplete form


h3. Groovy Code Specific Autocomplete List

eXo IDE currently supports special features for the Groovy code autocomlete list, including *REST Service* ("application/x-jaxrs+groovy"), *POJO* ("application/x-groovy") and *Data Object* ("application/x-chromattic+groovy"). The autocomplete list varies, depending on Java types and is shown in the following cases:

* <local variable name>.
* <object's field name>.\_
* <static field name>.\_
* <method's parameter name>.\_
* <class name>.\_
* @<annotation name>\_
* in the line after the space.

IDE compiles classes, which are described in the project's classpath, before generation of _Autocomplete list_. If the compilation of some class is failed, the error message will appear in _Output Panel_ instead of *Autocomplete Form* as shown below:
{code}
[ERROR] Error (500: Internal Server Error)
startup failed, /ide-project/data/Pojo.groovy: 9: unexpected token: vpid @ line 9, column 3.
vpid fg(){
^
{code}
To display classes from folder, described as _folder source_ in the project's classpath, in the _Autocomplete Form_, the files with such classes should fulfill conditions as follows:

# Must be located in folder with respect to package structure.
# The name must be the same as the class name located in a file.
# Must have extension ".groovy" or ".grs".


h4. Class Name

You can view class's JavaDoc and class name from the autocomplete form. eXo IDE provides appropriate import statement into the file header automatically, if needed.
There is a list of default packages for the Groovy code and so are imported explicitly:
* *java.lang.*\*
* *java.io.\**
* *java.lang.\**
* *java.math.BigDecimal*
* *java.math.BigInteger*
* *java.net.\**
* *java.util.\**
* *groovy.lang.\**
* *groovy.util.\**

!class.png|border=1!

*Illustration. Groovy autocomplete form for classes*


h4. Object's Fields and Methods Autocompletion

You can also view JavaDoc and autocomplete the object's fields and methods as follows:
* *Step 1:* Print the instance name with the dot (.) at the end.
* *Step 2:* Press *Ctrl+Space* to view all public methods and fields of the object. The JavaDoc for the selected field or method is shown.
* *Step 3:* Select the appropriate item in the autocomplete form and click the *Enter* key; or double-click this item.

!methods_autocomplete.png|border=1!

*Illustration. Groovy autocomplete form for public methods*


h4. Static Fields and Methods Autocompletion

eXo IDE supports the autocompletion of static fields, methods and object's fields and methods.

{note}
The autocompletion for methods and fields of the class or instance can only work, if it is called after the symbol ".".
{note}



h4. Annotations Autocompletion

It is possible to autocomplete the annotations, followed by symbol "@". The Autocomplete form for annotation contains the list of available annotations like this:

!annotations_autocomplete.png|border=1!

*Illustration. Groovy autocomplete form for annotations*


h4. Local Variables and Parameters Autocompletion

Local variables and method's parameters are marked with the special icon in the autocomplete form - !local.png!. eXo IDE supports the autocompletion for local variables and method's parameters.

Besides, the keywords of Groovy code are not marked with icons in the autocomplete list.


h3. Validate Java Types and Fix Import Statements

If you forget to insert the import statement, the line with error will be marked as follows:

!error_autocomplete.png|border=1!

*Illustration. Groovy Code Error Mark*

To view and fix the Java type error, do as follows:
* *Step 1:* Hover the cursor on error marks to see the error message in tool tips.
* *Step 2:* Click the error icon in the _Line numbers_ field.
* *Step 3:* Select the appropriate import statement and press the *Enter* key; or double-click to insert it into the header of the file.


h2. Code Outline

The code outline is used to create codes productively. The outline is available for all types of files, except for _Text_ or _CSS_ files.

!outline.png!

*Illustration. JavaScript Code Outline*

The _Outline Panel_ is opened automatically once a file has been created or opened. You can close the _Outline Panel_ by clicking the *Close* button on the tab header. Also, you can show/hide the _Outline Panel_ by pressing the *Show/Hide Outline* button on the toolbar or select *View* on the top menu and then select/deselect *Outline* from the drop-down menu.

In the _Outline Panel_, you can see the tree of variables, functions, classes, objects, methods, fields, parameters, annotations,  HTML and XML tags with icon "< >", and special code delimiters like *"<% ... %>"* in the _ECM Template_ file, or *"CDATA"* in the _Google Gadget_ file as the illustrations below.

!ecm-template-outline.png!

*Illustration. ECM Template Code Outline*

!google-gadget-outline.png!

*Illustration. Google Gadget Code Outline*

The outline tree is refreshed automatically every two seconds after you stop typing the code. You can click the item in the outline tree. The cursor then sets on the line where this item is defined. When you move the cursor into the file content, the appropriate node is selected in the outline tree.


h3. Code Outline for Groovy Code

In the _Outline Panel_ for the Groovy code of REST Service, ECM Template, POGO and Data Object files, you can see not only names and types of your classes, variables, methods, fields, or parameters, but also their modifiers and annotations in the view of icons and tooltips.

The following is the list of icons connected to different access modifiers.

|| Access modification || Icon ||
| _private_ | Red square |
| _public_ | Green circle |
| _protected_ | Yellow rhombus |
| without access modifier | Blue triangle |

The following is the list of letters placed over the node icons of outline node and one icon connected to special modifiers.

|| Letter/Icon || Modifier ||
| *a* | Abstract |
| *s* | Static |
| *f* | Final |
| *t* | Transient |
| *v* | Volatile |
| Clock | Synchronized |

Class or method with annotation(s) is displayed with the *@* symbol near the title in the outline tree. To see the full list of annotations, hover the cursor on *@*.

!rest-service-outline.png!

*Illustration. REST Service Code Outline*


h1. Edit File in the WYSIWYG Editor

Besides the _Code Editor_, you can open and edit HTML files and _Google Gadgets_ with the _WYSIWYG Editor_. You can set the _WYSIWYG Editor_ for those files by default.

Currently _WYSIWYG Editor_ can be used to edit the HTML, Google Gadget or Groovy Template files.

The _WYSIWYG Editor_ does not support the line numbering, auto-indentation and format, code coloring, autocomplete, code outline or type error validation. However, the text edited with the _WYSIWYG Editor_ looks as similar as published results. This editor has many common editing features as working in Microsoft Word, or OpenOffice.

To open a file with the _WYSIWYG Editor_, see *Open File with the Non-default Editor* above.


h1. Preview File Properties

Connected with the JCR repository node, file properties are displayed in the _Properties Tab_ in the bottom of _Content Panel_. To view file properties, do as follows:

* *Step 1:* Open the file in the _Content Panel_.
* *Step 2:* Click the *Show Properties* button at the right corner of the toolbar; or go to *View > Properties* on the top menu.

!ide_change_file_property.png!

*Illustration. View file's properties*

{note}
It is impossible to view the properties of files created but not saved yet.
{note}