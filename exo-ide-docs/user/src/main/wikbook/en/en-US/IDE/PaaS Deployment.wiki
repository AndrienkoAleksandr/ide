h1. Heroku

1. Make sure you have registered an account at [http://heroku.com|http://heroku.com/].

2. In your left pane Site Explorer, select the folder you want to deploy to Heroku. The folder must be an initialized Git repository. If you are starting from a new folder, use Init Repository in the Git menu.

3. In the Heroku menu, select Create Application.

  !Heroku.png|border=1!

4. The location of the Git repository will be set by default with the folder you selected. The application name will be used to identify the application on the Heroku server. Your application will be located at the URL: name.heroku.com
If you do not choose a name, a random name will be chosen for you. The remote repository name will be used to identify the Heroku remote in the Git menu. By default, the repository will be called "heroku". 

5. Validate to create the new app. If the application creation is successful, you will see the URL, name and GitURL of your application in the Output console. 


!output.png|border=1!

6. Generate a new SSH key and push it to Heroku by selecting the Deploy public key option. You can view your public key from the SSH key manager in the Window menu. 

!SSH-key.png|border=1!


7. To push your application to Heroku, make a Git Push in the Git > Remote menu. Choose the "heroku" remote repository (or the name you chose earlier). Once the code is pushed, you will get a notification in your the console.

8. Finally, you can run rake tasks in the Heroku environment by using the Rake option in the Heroku menu. Type your Rake command and the output will be displayed in the console. Read more about Heroku's rake support: [http://devcenter.heroku.com/articles/rake|http://devcenter.heroku.com/articles/rake] 

!rake-migrate.png|border=1!

9. After creating an application you can delete, rename or view the application's info using the Heroku menu.

h1. OpenShift Express

1. Make sure you have created an account at \[http://openshift.redhat.com/app/express\|http://openshift.redhat.com/app/express\].

2. In the OpenShift menu, choose Create Domain. You can only create one domain and this will be considered as your application name space. 

!OpenShift.png|border=1!

3. On the first usage, the application will prompt you for your OpenShift credentials.

4. Enter your credentials and validate to create your domain. At this point, the IDE will create a SSH public and private key and deploy the public key to your OpenShift account. You can view you SSH keys in the SSH Key Manager.

5. You can now create an application. Create a new folder and select it. In the OpenShift menu, choose Create Application. You will be asked to choose an application name and an application type. After validation, OpenShift will generate the default structure of your application in its remote repository. The repository will automatically be added to the list of remotes and named as "express".

6. To pull the application to your folder, make a Git Pull.

7. You can now modify your application. To update it on the OpenShift server, simply make a Git Add, Git Commit, and Git Push.

8. At all times, you can use the User Info menu to see the list of applications and their related information. 

!User-info.png|border=1!

h1. CloudBees

1. Make sure you have an account on Cloudbees and that you have suscribed to the basic Dev@Cloud and Run@Cloud services.

2. Create a new Java project by selecting Java Project in the File/New menu.

3. Select the Java application you just created and in the Cloudbees menu, select Initialize Application. You will be asked for your Cloudbees Login and Password.

  !CB-menu.png|border=1!

4. Choose the Cloudbees domain you want to deploy to and give a name to your application. This will initialize your application on Run@Cloud.


!cloudbees-init.png|border=1!


5. We now need to push our code to a remote repository, in order to build it on Dev@Cloud. For this, we will use GitHub as an intermediary. Start by initializing a Git repository on your project (Git menu-> Initialize repository).

6. If you haven't set up your GitHub account to work with your IDE yet, generate a new SSH key for [github.com|http://github.com/] and copy the public key to your GitHub account (Account Settings).

7. Create a new repository in GitHub and copy the SSH url.

8. Back in the IDE, in the Git/Remote/Remotes menu, add GitHub as a remote repository and paste the SSH url.

9. Push you project to GitHub.

10. Go to your Cloudbees Jenkins dashboard ([https://yourname.ci.cloudbees.com/]) and create a new Job.

11. Choose a Job name, select Maven project and continue to the next screen.


!maven.png|border=1!


12. In the "Source Code Management" section, select Git. Insert the URL of the GitHub repository.

13. Copy the SSH public key that Cloudbees generated to your GitHub account (Account Settings).

14. In the "Post-build Actions" section, select Cloudbees Deployment and enter the Application Id that you had chosen when initializing the application.

15. Launch the build. Once built, the application will be deployed to Run@Cloud.
