eXo IDE provides all necessary tools for easy deployment your projects on Google App Engine, Cloud Foundry, Heroku, OpenShift and CloudBees PaaS.

h1. Google App Engine

Google App Engine is a PaaS cloud computing platform for developing and hosting web applications written in Java, Python and Go (experimental support) languages. To deploy application on Google App Engine, do as follows:

* *Step 1:* Make sure that you have Google Account at [https://accounts.google.com|https://accounts.google.com] with connected Google App Engine service.

* *Step 2:* Open the project you want to deploy to Google App Engine.

* *Step 3:* In the *PaaS > Google App Engine* menu, choose *Login*.

!GAE_menu.png|border=0!

*Illustration. Google App Engine menu*

In the appeared *Not Authorized* window click the *Authenticate* button.

!GAE_not_authorized.png|border=0!

*Illustration. Not Authorized window*

* *Step 4:* If you are not logged in to Google Account, new tab with login page will be opened in your browser. Otherwise, if you are logged in to your Google Account, you will be redirected to the Google App Engine authorization page.

!GAE_authorization_page.png|border=0!

*Illustration. Google App Engine authorization page*

In this page you will be asked to allow the access for eXo IDE to manage your applications. Press *Allow access* button, wait for *Authentication successful* message and switch to eXo IDE tab.

!GAE_authentication_successful_page.png|border=0!

*Illustration. Authentication Successful page*

* *Step 5:* Go to *PaaS > Google App Engine > Create Application...*. In the appeared *Create Application on Google App Engine* window click the *Create* button.

* *Step 6:* You will be redirected to the Google App Engine page to create a new application.

* *Step 7:* Type application identifier and application title in the appropriate text fields. Specify what type of users can sign in to your application and click *Create Application* button.

!GAE_create_app_page.png|border=0!

*Illustration. Google App Engine page*

Wait for *Application created* message and switch to eXo IDE tab.

!GAE_app_created_message.png|border=0!

*Illustration. Application created page*

* *Step 8:* Click *Deploy* button in the *Create Application on Google App Engine* window. Your application will be builded and deployed to Google App Engine. The build and deploy status displays in the *Output* window. If it is successful, you will receive a message with your application URL.

!GAE_output_window.png|border=0!

*Illustration. Output message about build and deploy of the application to Google App Engine*

* *Step 9:* Now, having your application deployed, you can manage it by using *Project > PaaS > Google App Engine* menu command. You can see the resource limits for your application, state of the Cron jobs and available backends. Also you can update your App Engine services such as Indexes, PageSpeed, Queues, DoS.

!GAE_application_window.png|border=0!

*Illustration. Google App Engine Application window for manage an application*

You can modify your application and update it on the Google App Engine, simply click *Update Application* menu command in *PaaS > Google App Engine* menu.


h1. Heroku

Heroku is a free, cloud-based platform for Ruby application deployment. To deploy your Ruby and Ruby on Rails projects, do as follows:

* *Step 1:* Make sure you have registered an account at [http://heroku.com|http://heroku.com/]

* *Step 2:* Open the project you want to deploy to Heroku.

* *Step 3:* Go to *PaaS > Heroku > Create Application...* .

!Heroku.png|border=0!

*Illustration. Heroku menu*

* *Step 4:* The location of the Git repository will be set by default with the folder you have selected. The application name will be used to identify the application on the Heroku server. Your application will be located at the URL: name.heroku.com
If you do not choose a name, a random name will be chosen for you. The remote repository name will be used to identify the Heroku remote in the Git menu. By default, the repository will be called "heroku".

* *Step 5:* Validate to create the new app. If the application creation is successful, you will see the URL, name and Git URL of your application in the Output console.

!output.png|border=0!

*Illustration. Output message about the creation of application.*


* *Step 6:* Generate a new SSH key and push it to Heroku by selecting the Deploy public key option. You can view your public key from the SSH key manager in the Window menu.

!SSH-key.png|border=0!

*Illustration. "SSH keys" window*


* *Step 7:* Go to Git > Remote > Push... to push your application to Heroku. Choose the "heroku" remote repository (or the name you have chosen earlier). Once the code is pushed, you will get a notification in your the console.

* *Step 8:* Finally, you can run rake tasks in the Heroku environment by using the Rake option in the Project > PaaS > Heroku menu. Type your Rake command and the output will be displayed in the console. Read more about Heroku's rake support: [http://devcenter.heroku.com/articles/rake|http://devcenter.heroku.com/articles/rake]

!rake-migrate.png|border=0!

*Illustration. "Execute rake command" window*

* *Step 9:* After creating an application you can delete, rename or view the application's info using the Project > PaaS > Heroku menu command.


h1. OpenShift

OpenShift is a PaaS for Java, Perl, PHP, Python, Ruby and Node.js applications deployment in a shared-hosting model. To deploy your applications on OpenShift, follow the next steps:

* *Step 1:* Make sure you have created an account at [https://openshift.redhat.com/app/platform]

* *Step 2:* In the OpenShift menu, choose Create Domain. You can only create one domain and this will be considered as your application name space.

!OpenShift.png|border=0!

*Illustration. OpenShift menu*

* *Step 3:* On the first usage, the application will prompt you for your OpenShift credentials.

* *Step 4:* Enter your credentials and validate to create your domain. At this point, the IDE will create an SSH public and private keys and deploy the public key to your OpenShift account. You can view you SSH keys in the SSH Key Manager.

* *Step 5:* You can now create an application. Create a new project and open it. In the OpenShift menu, choose Create Application. You will be asked to choose an application name and an application type. After validation, OpenShift will generate the default structure of your application in its remote repository. The repository will automatically be added to the list of remotes and named as "express".

* *Step 6:* To pull the application to your folder, make a Git Pull.

* *Step 7:* You can now modify your application. To update it on the OpenShift server, simply make a Git Add, Git Commit, and Git Push.

* *Step 8:* At all times, you can use the User Info menu to see the list of applications and their related information.

!User-info.png|border=0!

*Illustration. User information window*

h1. CloudFoundry

Cloud Foundry is a free, open source cloud platform as a service software to deploy Java projects. To deploy your projects, do as follows: 

* *Step 1:* Be sure that you have an account at  http://www.cloudfoundry.com/ 

* *Step 2:* Open your project and go to *PaaS > CloudFoundry > Create application...* as shown below:

!CloudFoundry_create.png|border=0!

*Illustration. CloudFoundry menu*

* *Step 3:* In the appeared window you can edit application name and get its URL as shown below:

!Cloudfoundry_initialize.png|border=0!

*Illustration. "Create Application" dialog window*

If you'll uncheck the *Autodetect* checkbox, you'll be able to select the project type and indicate the required memory size for your project. You can also choose the application URL  different from the default one. To do this, check the *Custom* checkbox and edit the URL.

* *Step 4:* Put a check at Start After Creation box, if you want to deploy your application after build automatically, and click *Create*

You may be asked to log in to CloudFoundry if you haven't done it before, using *Switch Account* command of CloudFoundry menu. In the appeared window enter your email and password to proceed. You will be asked also to initialize your project folder as GIT repository. Click OK and monitor the application build. The messages about succesfull login and GIT repository creation will be displayed in the Output window.

* *Step 5:* The build status displays in the *Build project* window. If it is successful, you will receive a message with your application domain.

When the application is created, you can edit, delete, rename or view the application's info using the Project > PaaS > CloudFoundry menu command.

To edit your application URLs go to *Project > PaaS > CloudFoundry* and click *...* button.

!app_urls.png|border=0!

*Illustration. "Application URLs" dialog window*

Click *Unmap* button to delete the URL. If you need to add a new one, type it to the dialog box and click *Map* button to approve. The new URL will appear in the list.



To view the applications status and information, go to *PaaS > CloudFoundry > Applications...* 

!application-info.png|border=0!

*Illustration. Application window*

Use Start, Stop, Restart or Delete buttons to manage the applications.


h1. CloudBees

CloudBees is a cloud platform to deploy Java applications. To deploy applications on CloudBees, do as follows:

* *Step 1:* Make sure you have an account on Cloudbees and that you have subscribed to the basic Dev@Cloud and Run@Cloud services.

   To make your builds deployable to Run@Cloud configure Jenkins as following:
* Make sure you installed CloudBees Deployer plugin (Manage Jenkins \-> Manage Plugins), if not - add it from Available list

!deplplugin.jpg|border=0!

*Illustration. Plugins window*

* To make it work properly you might need to enter your CloudBees account info to Jenkins. To do that: copy/paste your Account name, API and Secret keys from your Account \-> Security Keys to Manage Jenkins \-> Configure System window, so you'll have something like:

!cbapikey.jpg|border=0!

*Illustration. "Configure System" window*


* *Step 2:* For example, create a new Java Spring project by selecting *Create Project* in *Project > New* menu.

* *Step 3:* Go to *PaaS > CloudBees > Create Application...*. You will be asked for your CloudBees Login and Password.

!CB-menu.png|border=0!

*Illustration. CloudBees menu*

* *Step 4:* Choose the Cloudbees domain you want to deploy to and give a name to your application. Click OK and monitor the application build. This will initialize your application on Run@Cloud. The messages about succesfull login and GIT repository creation will be displayed in the Output window.

* *Step 5:* The build status displays in the *Building* window. If it is successful, you will receive a message with your application domain.

!cloudbees-init.png|border=0!

*Illustration. Output message about application initialization*

* *Step 6:* We now need to push our code to a remote repository, in order to build it on Dev@Cloud. For this, we will use GitHub as an intermediary. If you haven't set up your GitHub account to work with your IDE yet, generate a new SSH key for [github.com|http://github.com/] and copy the public key to your GitHub account (Account Settings).

* *Step 7:* Create a new repository in GitHub and copy the SSH url.

* *Step 8:* Go to the IDE: *Git > Remote > Remotes...*, add GitHub as a remote repository and paste the SSH url.

* *Step 9:* Push your project to GitHub.

* *Step 10:* Go to your Cloudbees Jenkins dashboard ([https://yourname.ci.cloudbees.com/]) and create a new Job.

* *Step 11:* Choose a Job name, select Maven project and continue to the next screen.

!maven.png|border=0!

*Illustration. Jenkins dashboard/New Job*


* *Step 12:* In the "Source Code Management" section, select Git. Insert the URL of the GitHub repository.

* *Step 13:* Copy the SSH public key that Cloudbees generated to your GitHub account (Account Settings).

* *Step 14:* In the "Post-build Actions" section, select Cloudbees Deployment and enter the Application Id that you had chosen when initializing the application.

!depl2cb.jpg|border=0!

*Illustration."Post-build Actions" section*

* *Step 15:* Launch the build. Once built, the application will be deployed to Run@Cloud.

Now, having your application deployed, you can continue to use them according to your goals.
